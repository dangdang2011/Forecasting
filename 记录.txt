** 20180612 **
权值，1-10号*0.1，11-17*0.3，18-23*0.6
数据分布
测试一下lightgbm



** 20180609 **
模型测试结果：
param_test = {
        'max_depth':[3,4,5,6],
        'min_child_weight':[1,2,3,4],
        # 'gamma': [i / 10.0 for i in range(2, 4)]
    }
Parameter: {'max_depth': 3, 'min_child_weight': 4} 0.73034260107
param_test = {
        'max_depth':[3,4,5,6],
        'min_child_weight':[5,6,7,8],
        # 'gamma': [i / 10.0 for i in range(2, 4)]
    }Parameter: {'min_child_weight': 8, 'max_depth': 4} 0.729386887058


param_test = {
        'max_depth':[4,5,6,7],
        'min_child_weight':[2,3,4,5],
        # 'gamma': [i / 10.0 for i in range(2, 4)]
    }
Parameter: {'max_depth': 4, 'min_child_weight': 2} 0.729914246946


 param_test = {
        'max_depth':[3,4,5,6,7,8,9,10],
        'min_child_weight':[1,2,3,4,5,6,7,8],
        # 'gamma': [i / 10.0 for i in range(2, 4)]
    }

Parameter: {'min_child_weight': 3, 'max_depth': 3} 0.729241302797





** 20180607 **
修正了预处理部分的问题，准确率提高到0.72左右
比较了xgboost和gbdt的性能，增加了模型筛选模块。目前GBDT更合适一些。
eg显示如下：

1-23日活跃用户有： 18223
在这里使用了模型： XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,
       colsample_bytree=1, gamma=0, learning_rate=0.1, max_delta_step=0,
       max_depth=3, min_child_weight=1, missing=None, n_estimators=100,
       n_jobs=1, nthread=None, objective='binary:logistic', random_state=0,
       reg_alpha=0, reg_lambda=1, scale_pos_weight=1, seed=None,
       silent=True, subsample=1)
预测数据有： 17241
真实数据有： 18223
precision is: 0.7397482744620382 recall is: 0.699884761016298
正阳例，预测出真正的活跃用户有： 12754 评分： 0.7192646063613805
在这里使用了模型： GradientBoostingClassifier(criterion='friedman_mse', init=None,
              learning_rate=0.1, loss='deviance', max_depth=3,
              max_features=None, max_leaf_nodes=None,
              min_impurity_decrease=0.0, min_impurity_split=None,
              min_samples_leaf=1, min_samples_split=2,
              min_weight_fraction_leaf=0.0, n_estimators=100,
              presort='auto', random_state=None, subsample=1.0, verbose=0,
              warm_start=False)
预测数据有： 17391
真实数据有： 18223
precision is: 0.7397504456327986 recall is: 0.7059759644405422
正阳例，预测出真正的活跃用户有： 12865 评分： 0.7224686920873814

提出疑问：add_feature第13行的14是怎么来的？这里有报错： ('string index out of range', 'occurred at index 14')

报错完整信息如下：
 File "/Users/lixuefei/PycharmProjects/bigdata/addFeature.py", line 47, in AddFeature
    min_action_type = pd.DataFrame(train_feature.iloc[:, [5, 6, 7, 8, 9, 10]]).apply(Min_action_type, axis=1)
  File "/Users/lixuefei/anaconda/lib/python3.5/site-packages/pandas/core/frame.py", line 4877, in apply
    ignore_failures=ignore_failures)
  File "/Users/lixuefei/anaconda/lib/python3.5/site-packages/pandas/core/frame.py", line 4973, in _apply_standard
    results[i] = func(v)
  File "/Users/lixuefei/PycharmProjects/bigdata/addFeature.py", line 16, in Min_action_type
    return str(x.idxmin())[14]
IndexError: ('string index out of range', 'occurred at index 0')


** 20180605 ** 
@糖糕补充了计算特征值的部分

** 20180604 **
1. 补充了预测部分和baseline计算部分。于label.py中。
2. 从特征到打标签到建模预测的过程如下:
   2.1 将数据集分成两部分，一部分（1-23日）用来建模，另一部分（24-30）用来验证。在1-23日注册的用户，如果在24-30日仍然出现活动则为活跃用户。因此将1-24日的注册文件的user_id与24-30所有活动日志的user_id进行比对，只要在后者出现过，则该user_id标注为1（活跃），否则为0（不活跃）
   2.2 timeInterval函数负责数据抽取和特征提取，特征有除了我们之前提到的8个（launch video_create和6种action以外），还有register的三个特征，但是目前建模先不用（used_feature = [4,5,6,7,8,9,10,11]）。
   2.3 用1-23作为训练集。注意，为了验证本阶段模型的好坏，需要将训练集分为测试集和验证集，可以用来测试模型的好坏。
   2.4 用24-30作为真实的结果。注意，在2.3验证部分，我们使用1-23日数据和评分准则计算模型的好坏，等模型测试好了以后，将1-23作为测试集，24-30作为验证集，验证最终的结果。
   2.5 2.3的验证部分大家觉得有必要吗？因为验证模型时，将模型随机划分为测试集和训练集是一种基本的交叉验证方法。但是我认为其实只有2.4作为验证好像也足够了。 详情可以参考 https://mp.weixin.qq.com/s/-Av2AusdG1HUBtyxNRJebA
   2.6 我们最终的上传结果，就是用1-30日的数据输入模型以后，user_id对应的label。


** 20180601 ** 
1. action_type.csv 文件时action种类的预处理结果。
action种类共6种，播放，关注，点赞，转发，举报，减少此类作品
# action_type
# 0    19798261
# 1      555671
# 2      206079
# 3       46078
# 4         157
# 5         982
举报是最少的（157）。产生action的用户数量为43710位。
2. app_launch_res.csv  产生app_launch的用户有1322302位。
3. user_register_log.txt  用户数量51708。
# file = pd.DataFrame(pd.read_table('user_register_log.txt'))
4. video_create_log.txt 用户数量不多于35150。(7606)
5. 我们的数据集要从注册日志51708个人当中产生。

** 20180601 ** 
1. action_type.csv 文件时action种类的预处理结果。
action种类共6种，播放，关注，点赞，转发，举报，减少此类作品
# action_type
# 0    19798261
# 1      555671
# 2      206079
# 3       46078
# 4         157
# 5         982
举报是最少的（157）。产生action的用户数量为43710位。
2. app_launch_res.csv  产生app_launch的用户有1322302位。
3. user_register_log.txt  用户数量51708。
# file = pd.DataFrame(pd.read_table('user_register_log.txt'))
4. video_create_log.txt 用户数量不多于35150。(7606)
5. 我们的数据集要从注册日志51708个人当中产生。

** 20180604 **
1. 补充了预测部分和baseline计算部分。于label.py中。
2. 从特征到打标签到建模预测的过程如下:
   2.1 将数据集分成两部分，一部分（1-23日）用来建模，另一部分（24-30）用来验证。在1-23日注册的用户，如果在24-30日仍然出现活动则为活跃用户。因此将1-24日的注册文件的user_id与24-30所有活动日志的user_id进行比对，只要在后者出现过，则该user_id标注为1（活跃），否则为0（不活跃）
   2.2 timeInterval函数负责数据抽取和特征提取，特征有除了我们之前提到的8个（launch video_create和6种action以外），还有register的三个特征，但是目前建模先不用（used_feature = [4,5,6,7,8,9,10,11]）。
   2.3 用1-23作为训练集。注意，为了验证本阶段模型的好坏，需要将训练集分为测试集和验证集，可以用来测试模型的好坏。
   2.4 用24-30作为真实的结果。注意，在2.3验证部分，我们使用1-23日数据和评分准则计算模型的好坏，等模型测试好了以后，将1-23作为测试集，24-30作为验证集，验证最终的结果。
   2.5 2.3的验证部分大家觉得有必要吗？因为验证模型时，将模型随机划分为测试集和训练集是一种基本的交叉验证方法。但是我认为其实只有2.4作为验证好像也足够了。 详情可以参考 https://mp.weixin.qq.com/s/-Av2AusdG1HUBtyxNRJebA
   2.6 我们最终的上传结果，就是用1-30日的数据输入模型以后，user_id对应的label。
